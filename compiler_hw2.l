/* Definition section */
%{
	#include "y.tab.h"	/* header file generated by bison */
	#include <stdbool.h>

	extern YYSTYPE yylval; //YYSTYPE
	char buf[256];
	char comment_buf[256];

	/* This macro is used to record code line */
	#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { yylval.string_val = yytext; return ADD; }
"-" 	{ yylval.string_val = yytext; return SUB; }
"*" 	{ yylval.string_val = yytext; return MUL; }
"/" 	{ yylval.string_val = yytext; return DIV; }
"%"     { yylval.string_val = yytext; return MOD; }
"++"    { yylval.string_val = yytext; return INC; }
"--"    { yylval.string_val = yytext; return DEC; }

 /* Relational */
">"		{ yylval.string_val = yytext; return MT; }
"<"		{ yylval.string_val = yytext; return LT; }
">="	{ yylval.string_val = yytext; return MTE; }
"<="	{ yylval.string_val = yytext; return LTE; }
"=="	{ yylval.string_val = yytext; return EQ; }
"!="	{ yylval.string_val = yytext; return NE; }

 /* Assignment */
"="		{ yylval.string_val = yytext; return ASGN; }
"+="	{ yylval.string_val = yytext; return ADDASGN; }
"-="	{ yylval.string_val = yytext; return SUBASGN; }
"*="	{ yylval.string_val = yytext; return MULASGN; }
"/="	{ yylval.string_val = yytext; return DIVASGN; }
"%="	{ yylval.string_val = yytext; return MODASGN; }

 /* Logical */
"&&"	{ yylval.string_val = yytext; return AND; }
"||"	{ yylval.string_val = yytext; return OR; }
"!"		{ yylval.string_val = yytext; return NOT; }

 /* Delimiters */
"("		{ yylval.string_val = yytext; return LB; }
")"		{ yylval.string_val = yytext; return RB; }
"{"		{ yylval.string_val = yytext; return LCB; }
"}"		{ yylval.string_val = yytext; return RCB; }
"["		{ yylval.string_val = yytext; return LSB; }
"]"		{ yylval.string_val = yytext; return RSB; }
","		{ yylval.string_val = yytext; return COMMA; }

 /* Print Keywords */	
"print"		{ yylval.string_val = yytext; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ yylval.string_val = yytext; return IF; }
"else"		{ yylval.string_val = yytext; return ELSE; }
"for"		{ yylval.string_val = yytext; return FOR; }
"while"		{ yylval.string_val = yytext; return WHILE; }

 /* Declaration Keywords */
"void"		{ yylval.string_val = yytext; return VOID; }
"int"		{ yylval.string_val = yytext; return INT; }
"float"  	{ yylval.string_val = yytext; return FLOAT; }
"string"  	{ yylval.string_val = yytext; return STRING; }
"bool"  	{ yylval.string_val = yytext; return BOOL; }

 /* boolean Keywords */
"true"      { yylval.string_val = yytext; return TRUE; }
"false"     { yylval.string_val = yytext; return FALSE; }

"return"    { yylval.string_val = yytext; return RET; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; }
<STRING_STATE>\"		{ BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ yylval.string_val = yytext; return S_CONST; }

 /* Number Constant */
{integer}	{ yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; strcat(buf, yytext); }
<COMMENT>[^*\n]+	{ strcat(buf, yytext); }
<COMMENT>\n			{ 
						strcat(buf, yytext); 
						strcpy(comment_buf, buf); 
						yylval.string_val = comment_buf; 
					//	printf("L:%s",buf);
						memset(buf, 0, sizeof(buf));	
						return C_COMMENT_N; 
					}
<COMMENT>"*"		{ strcat(buf, yytext); }
<COMMENT>"*/"		{ 
						BEGIN INITIAL; 
						strcat(buf, yytext);
						strcpy(comment_buf, buf); 
						yylval.string_val = comment_buf; 
						//printf("L:%s\n",buf);
						memset(buf, 0, sizeof(buf)); 
						return END_COMMENT;
					}

 /* C++ type Comment */
\/\/.*	{ yylval.string_val = yytext; return CPLUS_COMMENT; }

 /* Variable ID */
 {id}       { yylval.string_val = yytext; return ID; }

 /* others */

[;]         { yylval.string_val = yytext; return SEMICOLON; }
[\n]        { return NEWLINE; }
[\t]		{ yylval.string_val = yytext; return TAB;} /* Ignore */
[ ]			{ }
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { }

%%

int yywrap()
{
    return 1;
}
