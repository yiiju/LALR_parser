/* Definition section */
%{
	#include "y.tab.h"	/* header file generated by bison */

	extern YYSTYPE yylval; //YYSTYPE
	extern void dump_symbol(int);
	extern int dump_flag;

	extern void semantic_error(char [], int);
	extern int error_flag;
	extern char sem_error_msg[100];

	#define BUF_SIZE 256
	char buf[BUF_SIZE];

	/* This macro is used to record code line */
	#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { yylval.string_val = "+"; CONCAT; return ADD; }
"-" 	{ yylval.string_val = "-"; CONCAT; return SUB; }
"*" 	{ yylval.string_val = "*"; CONCAT; return MUL; }
"/" 	{ yylval.string_val = "/"; CONCAT; return DIV; }
"%"     { yylval.string_val = "%"; CONCAT; return MOD; }
"++"    { yylval.string_val = "++"; CONCAT; return INC; }
"--"    { yylval.string_val = "--"; CONCAT; return DEC; }

 /* Relational */
">"		{ yylval.string_val = ">"; CONCAT; return MT; }
"<"		{ yylval.string_val = "<"; CONCAT; return LT; }
">="	{ yylval.string_val = ">="; CONCAT; return MTE; }
"<="	{ yylval.string_val = "<="; CONCAT; return LTE; }
"=="	{ yylval.string_val = "=="; CONCAT; return EQ; }
"!="	{ yylval.string_val = "!="; CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ yylval.string_val = "+="; CONCAT; return ADDASGN; }
"-="	{ yylval.string_val = "-="; CONCAT; return SUBASGN; }
"*="	{ yylval.string_val = "*="; CONCAT; return MULASGN; }
"/="	{ yylval.string_val = "/="; CONCAT; return DIVASGN; }
"%="	{ yylval.string_val = "%="; CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ yylval.string_val = "&&"; CONCAT; return AND; }
"||"	{ yylval.string_val = "||"; CONCAT; return OR; }
"!"		{ yylval.string_val = "!"; CONCAT; return NOT; }

 /* Delimiters */
"("		{ yylval.string_val = "("; CONCAT; return LB; }
")"		{ yylval.string_val = ")"; CONCAT; return RB; }
"{"		{ yylval.string_val = "{"; CONCAT; return LCB; }
"}"		{ yylval.string_val = "}"; CONCAT; return RCB; }
"["		{ yylval.string_val = "["; CONCAT; return LSB; }
"]"		{ yylval.string_val = "]"; CONCAT; return RSB; }
","		{ yylval.string_val = ","; CONCAT; return COMMA; }

 /* Print Keywords */	
"print"		{ yylval.string_val = yytext; CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ yylval.string_val = yytext; CONCAT; return IF; }
"else"		{ yylval.string_val = yytext; CONCAT; return ELSE; }
"for"		{ yylval.string_val = yytext; CONCAT; return FOR; }
"while"		{ yylval.string_val = yytext; CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.string_val = "void"; return VOID; }
"int"		{ CONCAT; yylval.string_val = "int"; return INT; }
"float"  	{ CONCAT; yylval.string_val = "float"; return FLOAT; }
"string"  	{ CONCAT; yylval.string_val = "string"; return STRING; }
"bool"  	{ CONCAT; yylval.string_val = "bool"; return BOOL; }

 /* boolean Keywords */
"true"      { yylval.string_val = yytext; CONCAT; return TRUE; }
"false"     { yylval.string_val = yytext; CONCAT; return FALSE; }

"return"    { yylval.string_val = yytext; CONCAT; return RET; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT; }
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT; }
<STRING_STATE>[^"]*		{ yylval.string_val = yytext; CONCAT; return S_CONST; }

 /* Number Constant */
{integer}	{ yylval.i_val = atoi(yytext); CONCAT; return I_CONST; }
{float}	    { yylval.f_val = atof(yytext); CONCAT; return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; CONCAT; return START_COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ 
						CONCAT;
						printf("%d: %s", yylineno-1, buf);
						bzero(buf, BUF_SIZE);
					}
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ 
						BEGIN INITIAL; 
						CONCAT;
						return END_COMMENT;
					}

 /* C++ type Comment */
\/\/.*	{ CONCAT; return CPLUS_COMMENT; }

 /* Variable ID */
 {id}       { 
 				yylval.string_val = strdup(yytext); 
				//printf("lex:%s\n", yylval.string_val); 
				CONCAT; 
				return ID; 
			}

 /* others */

[;]         { yylval.string_val = yytext; CONCAT; return SEMICOLON; }
[\n]        { 
				//CONCAT; 
				if(buf[0] == '\0') printf("%d:\n", yylineno-1);
				else printf("%d: %s\n", yylineno-1, buf); 
				if(error_flag == 1) {
					semantic_error(sem_error_msg, yylineno-1);
					error_flag = 0;
				}
				bzero(buf, BUF_SIZE);
				if(dump_flag == 1) {
					dump_symbol(1);
					dump_flag = 0;
				}
			}
[\t]		{ CONCAT; } /* Ignore */
[ ]			{ CONCAT; }
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { yyterminate(); }

%%

int yywrap()
{
    return 1;
}
